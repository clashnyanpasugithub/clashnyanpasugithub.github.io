<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://clashnyanpasugithub.github.io/news/article-21681.htm" />
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>C++ 函数模板</title>
        <meta name="description" content="介绍  函数模板  选择排序  调用该排序函数  CODE 目录  			  •共勉 　　“那些疯狂到以为自己能够改变世界的人，才能真正改变世界。” 苹果 “非同凡响” 广告·1997   •函数模板" />
        <link rel="icon" href="__ADDON__/img/clashnyanpasugithub/favicon.ico" type="image/x-icon"/>
    <!-- Template CSS -->
    <link rel="stylesheet" href="/assets/website/css/clashnyanpasugithub/style-starter.css">
    <!-- web fonts -->
    <link href="//fonts.googleapis.com/css2?family=Nunito:wght@200;300;400;600;700;800;900&display=swap" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-F1C52JTEWP"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-F1C52JTEWP');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!--header-->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                                <a class="navbar-brand" href="/">
                    <span>Clash Nyanpasu Github</span>
                </a>
                                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/free-nodes/">免费节点</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/news/">新闻资讯</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
            </nav>
        </div>
    </header>
    <!--/header-->
    <!-- about breadcrumbs -->
    <nav id="breadcrumbs" class="breadcrumbs">
        <div class="container page-wrapper">
            <a href="/">首页</a> » <a href="/news/">新闻资讯</a> » <span class="breadcrumb_last" aria-current="page">正文</span>
        </div>
    </nav>
    
    <!-- /index-block2 -->
    <section class="w3l-index3 py-5">
        <div class="container py-lg-3 mt-3">
            <div class="row">
                <div class="col-md-9">
                    <h1 class="mb-5">C++ 函数模板</h1>
                                      				  				  				  			 <div id="log-box">  				<div id="catalog"><ul id="catalog-ul"> <li><i class="be be-arrowright"></i> <a href="#title-0" title="介绍">介绍</a></li> <li><i class="be be-arrowright"></i> <a href="#title-1" title="函数模板">函数模板</a></li> <li><i class="be be-arrowright"></i> <a href="#title-2" title="选择排序">选择排序</a></li> <li><i class="be be-arrowright"></i> <a href="#title-3" title="调用该排序函数">调用该排序函数</a></li> <li><i class="be be-arrowright"></i> <a href="#title-4" title="CODE">CODE</a></li> </ul><span class="log-zd"><span class="log-close"><a title="隐藏目录"><i class="be be-cross"></i><strong>目录</strong></a></span></span></div>  			</div> <blockquote> <h3 id="blogTitle1">•共勉</h3> <p>　　“那些疯狂到以为自己能够改变世界的人，才能真正改变世界。”</p> <p style="text-align: right">苹果 “非同凡响” 广告·1997</p> </blockquote> <blockquote> <h3 id="blogTitle1">•函数模板</h3> <span class="directory"></span><h4 id="title-0">介绍</h4> <ul> <li>C++另一种编程思想称为 泛型编程 ，主要利用的技术就是模板</li> <li>C++提供两种模板机制：函数模板 和 类模板</li> </ul> <span class="directory"></span><h4 id="title-1">函数模板</h4> <p>语法格式</p> <div class="cnblogs_code"> <pre>template &lt;typename T&gt;<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">声明一个模板，告诉编译器后面代码中紧跟着的 T 不要报错，T 是一个通用数据类型</span> 函数声明或定义</pre> </div> <ul> <li>template：声明创建模板</li> <li>typename：表面其后面的符号是一种数据类型</li> <li>T：通用的数据类型，名称可以替换，通常为大写字母</li> </ul> <p>作用</p> <p>　　建立一个通用函数，其函数返回值类型和形参类型可以不具体制定，用一个虚拟的类型来代表。</p> <p>举例说明</p> <p>　　例如，对于如下交换函数：</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">void</span> swapInt(<span style="color: rgba(0, 0, 255, 1)">int</span> &amp;a,<span style="color: rgba(0, 0, 255, 1)">int</span> &amp;<span style="color: rgba(0, 0, 0, 1)">b) {</span><span style="color: rgba(0, 0, 255, 1)">int</span> tmp =<span style="color: rgba(0, 0, 0, 1)"> a;     a</span>=<span style="color: rgba(0, 0, 0, 1)"> b;     b</span>=<span style="color: rgba(0, 0, 0, 1)"> tmp; }</span></pre> </div> <p>　　我们传递的参数只能是整数类型，如果我们想要交换 double 类型的呢？</p> <p>　　那当然是重写一份啦~</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">void</span> swapDouble(<span style="color: rgba(0, 0, 255, 1)">double</span>&amp; a,<span style="color: rgba(0, 0, 255, 1)">double</span>&amp;<span style="color: rgba(0, 0, 0, 1)"> b) {</span><span style="color: rgba(0, 0, 255, 1)">double</span> tmp =<span style="color: rgba(0, 0, 0, 1)"> a;     a</span>=<span style="color: rgba(0, 0, 0, 1)"> b;     b</span>=<span style="color: rgba(0, 0, 0, 1)"> tmp; }</span></pre> </div> <p>　　对于这两份代码，你会发现除了参数类型不同外，交换的步骤都是相同的。</p> <p>　　那如果要交换 short 类型的呢，在重写一份吗？</p> <p>　　会不会过于啰嗦，下面就引出函数模板的强大之处。</p> <p>　　我们可以这么写：</p> <div class="cnblogs_code"> <pre>template &lt;typename T&gt;<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">声明一个模板，告诉编译器后面代码中紧跟着的T不要报错，T是一个通用数据类型</span><span style="color: rgba(0, 0, 255, 1)">void</span> mySwap(T&amp; a, T&amp;<span style="color: rgba(0, 0, 0, 1)"> b) {     T tmp</span>=<span style="color: rgba(0, 0, 0, 1)"> a;     a</span>=<span style="color: rgba(0, 0, 0, 1)"> b;     b</span>=<span style="color: rgba(0, 0, 0, 1)"> tmp; }</span></pre> </div> <p>　　利用函数模板实现数据交换，有两种调用方式：</p> <ul> <li>自动类型推导</li> <li>显示指定类型</li> </ul> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> test() {</span><span style="color: rgba(0, 0, 255, 1)">int</span> a =<span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 0, 255, 1)">int</span> b =<span style="color: rgba(128, 0, 128, 1)">20</span><span style="color: rgba(0, 0, 0, 1)">;      mySwap(a, b);</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">1.自动类型推到</span>     cout &lt;&lt;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">a =</span><span style="color: rgba(128, 0, 0, 1)">"</span> &lt;&lt; a &lt;&lt;<span style="color: rgba(0, 0, 0, 1)"> endl;     cout</span>&lt;&lt;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">b =</span><span style="color: rgba(128, 0, 0, 1)">"</span> &lt;&lt; b &lt;&lt;<span style="color: rgba(0, 0, 0, 1)"> endl;</span><span style="color: rgba(0, 0, 255, 1)">double</span> c =<span style="color: rgba(128, 0, 128, 1)">30</span><span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 0, 255, 1)">double</span> d =<span style="color: rgba(128, 0, 128, 1)">40</span><span style="color: rgba(0, 0, 0, 1)">;      mySwap</span>&lt;<span style="color: rgba(0, 0, 255, 1)">double</span>&gt;(c, d);<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">2.显示指定类型</span>     cout &lt;&lt;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">c =</span><span style="color: rgba(128, 0, 0, 1)">"</span> &lt;&lt; c &lt;&lt;<span style="color: rgba(0, 0, 0, 1)"> endl;     cout</span>&lt;&lt;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">d =</span><span style="color: rgba(128, 0, 0, 1)">"</span> &lt;&lt; d &lt;&lt;<span style="color: rgba(0, 0, 0, 1)"> endl; }</span></pre> </div> <p>　　对于方式 1，编译器会自动识别传递的参数类型，并做相应的调整：</p> <p style="text-align: center"><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/aa7db6db111f109ae92b5b6f145e9ac3.jpg" alt="C++ 函数模板" width="350" loading="lazy"/></p> <p style="text-align: left"> <p style="text-align: left">注意事项 1</p> <p style="text-align: left">　　传递的参数类型必须是同种类型的，即必须推导出一致的数据类型 T 才可以使用。</p> <p style="text-align: left">　　比如就不能通过<span class="cnblogs_code">mySwap</span>&nbsp; 函数交换 int 和 double 类型的数据：</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> test() {</span><span style="color: rgba(0, 0, 255, 1)">int</span> a =<span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 0, 255, 1)">double</span> b =<span style="color: rgba(128, 0, 128, 1)">20</span><span style="color: rgba(0, 0, 0, 1)">;     myswap(a, b); }</span></pre> </div> <p>　　由于 a,b 不是同种类型的，在编译阶段就会报错：</p> <p style="text-align: center"><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/0847dd9d1e780d1a21241df8594eb98a.jpg" alt="C++ 函数模板" width="520" loading="lazy"/></p> <p style="text-align: left">　　提示推导不出一致的 T 类型。</p> <p>注意事项 2</p> <p>　　必须遵循模板的声明和函数的声明一对一使用，即模板的声明只作用于紧挨着的函数声明。</p> <p>　　比如下面这种代码就会报错：</p> <div class="cnblogs_code"> <pre>template &lt;typename T&gt;<span style="color: rgba(0, 0, 255, 1)">void</span> func1(T &amp;<span style="color: rgba(0, 0, 0, 1)">a){}</span><span style="color: rgba(0, 0, 255, 1)">void</span> func2(T &amp;a){}</pre> </div> <p style="text-align: center"><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/1c38316175220b0323f59f2d88c66470.jpg" alt="C++ 函数模板" width="250" loading="lazy"/></p> <p style="text-align: left">　　因为声明的函数模板 T 只对<span class="cnblogs_code">func1</span>&nbsp; 起作用，如果<span class="cnblogs_code">func2</span>&nbsp; 也想用，必须重新声明：</p> <div class="cnblogs_code"> <pre>template &lt;typename T&gt;<span style="color: rgba(0, 0, 255, 1)">void</span> func1(T &amp;<span style="color: rgba(0, 0, 0, 1)">a) {}  template</span>&lt;typename T&gt;<span style="color: rgba(0, 0, 255, 1)">void</span> func2(T &amp;a) {}</pre> </div> <p>&nbsp;注意事项 3</p> <p>&nbsp;　　模板必须要确定出 T 的数据类型，才可以使用。</p> <p>　　比如如下代码就会报错：</p> <div class="cnblogs_code"> <pre>template &lt;typename T&gt;<span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> func() {}</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> test() {     func(); }</span></pre> </div> <p>　　因为函数<span class="cnblogs_code">func()</span>&nbsp; 的声明紧挨着模板的声明，所以他俩就是一对一的关系，那么要想调用<span class="cnblogs_code">func</span>&nbsp;，就必须给出 T 的数据类型；</p> <p>　　不然编译阶段都不通过。</p> <p style="text-align: center"><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/360ba51bbc1057c1afe326714f29cf6f.jpg" alt="C++ 函数模板" width="350" loading="lazy"/></p> <p style="text-align: left">　　对于这种不含参数的函数模板，必须使用&nbsp;显示指定类型 来调用：</p> <div class="cnblogs_code"> <pre>template &lt;typename T&gt;<span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> func() {}</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> test() {     func</span>&lt;<span style="color: rgba(0, 0, 255, 1)">int</span>&gt;<span style="color: rgba(0, 0, 0, 1)">(); }</span></pre> </div> <p>　　其中<span class="cnblogs_code">&lt;<span style="color: rgba(0, 0, 255, 1)">int</span>&gt;</span>&nbsp;随便写个数据类型就行，作用就是告诉函数模板传递的 T 为<span class="cnblogs_code">XX 类型</span>&nbsp;。</p> </blockquote> <blockquote> <h3 id="blogTitle1">•学以致用</h3> <p>　　有了函数模板的知识储备，下面来写一个排序函数，不管是传入<span class="cnblogs_code"><span style="color: rgba(0, 0, 255, 1)">int</span> 类型</span>&nbsp; 还是<span class="cnblogs_code"><span style="color: rgba(0, 0, 255, 1)">char</span> 类型</span>&nbsp; 都可以实现升序排列。</p> <span class="directory"></span><h4 id="title-2">选择排序</h4> <div class="cnblogs_code"> <pre>template &lt;typename T&gt;<span style="color: rgba(0, 0, 255, 1)">void</span> mySwap(T&amp; a, T&amp;<span style="color: rgba(0, 0, 0, 1)"> b) {     T tmp</span>=<span style="color: rgba(0, 0, 0, 1)"> a;     a</span>=<span style="color: rgba(0, 0, 0, 1)"> b;     b</span>=<span style="color: rgba(0, 0, 0, 1)"> tmp; } template</span>&lt;typename T&gt;<span style="color: rgba(0, 0, 255, 1)">void</span> mySort(T arr[],<span style="color: rgba(0, 0, 255, 1)">int</span> first,<span style="color: rgba(0, 0, 255, 1)">int</span> last)<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">order [first, last)</span><span style="color: rgba(0, 0, 0, 1)">{</span><span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">int</span> i = first; i &lt; last; i++)<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">选择排序</span><span style="color: rgba(0, 0, 0, 1)">    {</span><span style="color: rgba(0, 0, 255, 1)">int</span> minIndex =<span style="color: rgba(0, 0, 0, 1)"> i;</span><span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">int</span> j = i +<span style="color: rgba(128, 0, 128, 1)">1</span>; j &lt; last; j++<span style="color: rgba(0, 0, 0, 1)">)         {</span><span style="color: rgba(0, 0, 255, 1)">if</span> (arr[j] &lt;<span style="color: rgba(0, 0, 0, 1)"> arr[minIndex])                 minIndex</span>=<span style="color: rgba(0, 0, 0, 1)"> j;         }         mySwap(arr[i], arr[minIndex]);     } }</span></pre> </div> <span class="directory"></span><h4 id="title-3">调用该排序函数</h4> <div class="cnblogs_code"> <pre>template &lt;typename T&gt;<span style="color: rgba(0, 0, 255, 1)">void</span> print(<span style="color: rgba(0, 0, 255, 1)">const</span> T arr[],<span style="color: rgba(0, 0, 255, 1)">int</span> first,<span style="color: rgba(0, 0, 255, 1)">int</span> last)<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">输出数组[first, last)</span><span style="color: rgba(0, 0, 0, 1)">{</span><span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">int</span> i = first; i &lt; last; i++<span style="color: rgba(0, 0, 0, 1)">)         cout</span>&lt;&lt; arr[i] &lt;&lt;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;     cout</span>&lt;&lt;<span style="color: rgba(0, 0, 0, 1)"> endl; }</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> test1() {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">测试对整形数组进行排序</span><span style="color: rgba(0, 0, 255, 1)">int</span> arr[<span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">];</span><span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">int</span> i =<span style="color: rgba(128, 0, 128, 1)">0</span>; i &lt;<span style="color: rgba(128, 0, 128, 1)">10</span>; i++<span style="color: rgba(0, 0, 0, 1)">)         arr[i]</span>= rand()%<span style="color: rgba(128, 0, 128, 1)">20</span>;<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">随机产生[0~20)之间的随机数</span><span style="color: rgba(0, 0, 0, 1)">     cout</span>&lt;&lt;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">排序前：</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;     print(arr,</span><span style="color: rgba(128, 0, 128, 1)">0</span>,<span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">);     mySort(arr,</span><span style="color: rgba(128, 0, 128, 1)">0</span>,<span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">);     cout</span>&lt;&lt;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">排序后：</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;     print(arr,</span><span style="color: rgba(128, 0, 128, 1)">0</span>,<span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">); }</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> test2() {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">测试对字符型数组进行排序</span><span style="color: rgba(0, 0, 255, 1)">char</span> arr[<span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">];</span><span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">int</span> i =<span style="color: rgba(128, 0, 128, 1)">0</span>; i &lt;<span style="color: rgba(128, 0, 128, 1)">10</span>; i++<span style="color: rgba(0, 0, 0, 1)">)         arr[i]</span>=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">A</span><span style="color: rgba(128, 0, 0, 1)">'</span>+rand() %<span style="color: rgba(128, 0, 128, 1)">20</span>;<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">随机产生[0~20)之间的随机数</span><span style="color: rgba(0, 0, 0, 1)">     cout</span>&lt;&lt;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">排序前：</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;     print(arr,</span><span style="color: rgba(128, 0, 128, 1)">0</span>,<span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">);     mySort(arr,</span><span style="color: rgba(128, 0, 128, 1)">0</span>,<span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">);     cout</span>&lt;&lt;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">排序后：</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;     print(arr,</span><span style="color: rgba(128, 0, 128, 1)">0</span>,<span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">); }</span></pre> </div> <span class="directory"></span><h4 id="title-4">CODE</h4> <div class="cnblogs_code"> <pre>#include&lt;bits/stdc++.h&gt;<span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 255, 1)">namespace</span><span style="color: rgba(0, 0, 0, 1)"> std;  template</span>&lt;typename T&gt;<span style="color: rgba(0, 0, 255, 1)">void</span> mySwap(T&amp; a, T&amp;<span style="color: rgba(0, 0, 0, 1)"> b) {     T tmp</span>=<span style="color: rgba(0, 0, 0, 1)"> a;     a</span>=<span style="color: rgba(0, 0, 0, 1)"> b;     b</span>=<span style="color: rgba(0, 0, 0, 1)"> tmp; } template</span>&lt;typename T&gt;<span style="color: rgba(0, 0, 255, 1)">void</span> mySort(T arr[],<span style="color: rgba(0, 0, 255, 1)">int</span> first,<span style="color: rgba(0, 0, 255, 1)">int</span> last)<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">order [first, last)</span><span style="color: rgba(0, 0, 0, 1)">{</span><span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">int</span> i = first; i &lt; last; i++)<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">选择排序</span><span style="color: rgba(0, 0, 0, 1)">    {</span><span style="color: rgba(0, 0, 255, 1)">int</span> minIndex =<span style="color: rgba(0, 0, 0, 1)"> i;</span><span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">int</span> j = i +<span style="color: rgba(128, 0, 128, 1)">1</span>; j &lt; last; j++<span style="color: rgba(0, 0, 0, 1)">)         {</span><span style="color: rgba(0, 0, 255, 1)">if</span> (arr[j] &lt;<span style="color: rgba(0, 0, 0, 1)"> arr[minIndex])                 minIndex</span>=<span style="color: rgba(0, 0, 0, 1)"> j;         }         mySwap(arr[i], arr[minIndex]);     } } template</span>&lt;typename T&gt;<span style="color: rgba(0, 0, 255, 1)">void</span> print(<span style="color: rgba(0, 0, 255, 1)">const</span> T arr[],<span style="color: rgba(0, 0, 255, 1)">int</span> first,<span style="color: rgba(0, 0, 255, 1)">int</span> last)<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">输出数组[first, last)</span><span style="color: rgba(0, 0, 0, 1)">{</span><span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">int</span> i = first; i &lt; last; i++<span style="color: rgba(0, 0, 0, 1)">)         cout</span>&lt;&lt; arr[i] &lt;&lt;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;     cout</span>&lt;&lt;<span style="color: rgba(0, 0, 0, 1)"> endl; }</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> test1() {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">测试对整形数组进行排序</span><span style="color: rgba(0, 0, 255, 1)">int</span> arr[<span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">];</span><span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">int</span> i =<span style="color: rgba(128, 0, 128, 1)">0</span>; i &lt;<span style="color: rgba(128, 0, 128, 1)">10</span>; i++<span style="color: rgba(0, 0, 0, 1)">)         arr[i]</span>= rand()%<span style="color: rgba(128, 0, 128, 1)">20</span>;<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">随机产生[0~20)之间的随机数</span><span style="color: rgba(0, 0, 0, 1)">     cout</span>&lt;&lt;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">排序前：</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;     print(arr,</span><span style="color: rgba(128, 0, 128, 1)">0</span>,<span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">);     mySort(arr,</span><span style="color: rgba(128, 0, 128, 1)">0</span>,<span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">);     cout</span>&lt;&lt;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">排序后：</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;     print(arr,</span><span style="color: rgba(128, 0, 128, 1)">0</span>,<span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">); }</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> test2() {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">测试对字符型数组进行排序</span><span style="color: rgba(0, 0, 255, 1)">char</span> arr[<span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">];</span><span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">int</span> i =<span style="color: rgba(128, 0, 128, 1)">0</span>; i &lt;<span style="color: rgba(128, 0, 128, 1)">10</span>; i++<span style="color: rgba(0, 0, 0, 1)">)         arr[i]</span>=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">A</span><span style="color: rgba(128, 0, 0, 1)">'</span>+rand() %<span style="color: rgba(128, 0, 128, 1)">20</span>;<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">随机产生[0~20)之间的随机数</span><span style="color: rgba(0, 0, 0, 1)">     cout</span>&lt;&lt;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">排序前：</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;     print(arr,</span><span style="color: rgba(128, 0, 128, 1)">0</span>,<span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">);     mySort(arr,</span><span style="color: rgba(128, 0, 128, 1)">0</span>,<span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">);     cout</span>&lt;&lt;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">排序后：</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;     print(arr,</span><span style="color: rgba(128, 0, 128, 1)">0</span>,<span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">); }</span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> main() {     test1();     test2();</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">; }</span></pre> </div> </blockquote> <blockquote> <h3 id="blogTitle1">•结尾</h3> <p>　　咳咳，本次内容到此结束，<span style="text-decoration: line-through">完结撒花</span>。</p> </blockquote> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-21680.htm">图像处理学习笔记——BMP图片详解</a></p>
                                        <p>下一个：<a href="/news/article-22169.htm">在Java中将预定义的类名用作类或变量名</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-10-19-clash-nyanpasu.htm" title="「10月19日」最高速度22.8M/S，2024年Clash Nyanpasu Github免费机场订阅节点链接，2024翻墙机场推荐">「10月19日」最高速度22.8M/S，2024年Clash Nyanpasu Github免费机场订阅节点链接，2024翻墙机场推荐</a></li>
                        <li class="py-2"><a href="/news/article-21252.htm" title="Jpa框架下拼接原生sql 并执行">Jpa框架下拼接原生sql 并执行</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-3-free-node-subscribe.htm" title="「9月3日」最高速度18.1M/S，2024年Clash Nyanpasu Github每天更新免费机场订阅节点链接">「9月3日」最高速度18.1M/S，2024年Clash Nyanpasu Github每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-14-free-subscribe-node.htm" title="「11月14日」最高速度19.8M/S，2024年Clash Nyanpasu Github免费机场订阅节点链接，2024翻墙机场推荐">「11月14日」最高速度19.8M/S，2024年Clash Nyanpasu Github免费机场订阅节点链接，2024翻墙机场推荐</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-24-free-high-speed-nodes.htm" title="「9月24日」最高速度21M/S，2024年Clash Nyanpasu Github每天更新免费机场订阅节点链接">「9月24日」最高速度21M/S，2024年Clash Nyanpasu Github每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-15-free-clash-nyanpasu.htm" title="「9月15日」最高速度18.6M/S，2024年Clash Nyanpasu Github每天更新免费机场订阅节点链接">「9月15日」最高速度18.6M/S，2024年Clash Nyanpasu Github每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-16-free-high-speed-nodes.htm" title="「10月16日」最高速度18.2M/S，2024年Clash Nyanpasu Github免费机场订阅节点链接，2024翻墙机场推荐">「10月16日」最高速度18.2M/S，2024年Clash Nyanpasu Github免费机场订阅节点链接，2024翻墙机场推荐</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-27-free-clash-nyanpasu.htm" title="「9月27日」最高速度21.7M/S，2024年Clash Nyanpasu Github每天更新免费机场订阅节点链接">「9月27日」最高速度21.7M/S，2024年Clash Nyanpasu Github每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-9-free-node-subscribe-links.htm" title="「11月9日」最高速度18.7M/S，2024年Clash Nyanpasu Github免费机场订阅节点链接，2024翻墙机场推荐">「11月9日」最高速度18.7M/S，2024年Clash Nyanpasu Github免费机场订阅节点链接，2024翻墙机场推荐</a></li>
                        <li class="py-2"><a href="/news/article-19419.htm" title="宠物粮食专卖店电话号码 宠物粮食专卖店电话号码多少">宠物粮食专卖店电话号码 宠物粮食专卖店电话号码多少</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">24</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">12</span> <a href="/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
        <footer>
        <!-- footer -->
        <section class="w3l-footer">
            <div class="w3l-footer-16-main py-5">
                <div class="container">
                    <div class="d-flex below-section justify-content-between align-items-center pt-4 mt-5">
                        <div class="columns text-lg-left text-center">
                            <p>Clash Nyanpasu Github机场节点官网 版权所有 Powered by WordPress</p>
                        </div>
                        <div class="columns-2 mt-lg-0 mt-3">
                            <ul class="social">
                                <li><a href="#facebook"><span class="fa fa-facebook" aria-hidden="true"></span></a>
                                </li>
                                <li><a href="#linkedin"><span class="fa fa-linkedin" aria-hidden="true"></span></a>
                                </li>
                                <li><a href="#twitter"><span class="fa fa-twitter" aria-hidden="true"></span></a>
                                </li>
                                <li><a href="#google"><span class="fa fa-google-plus" aria-hidden="true"></span></a>
                                </li>
                                <li><a href="#github"><span class="fa fa-github" aria-hidden="true"></span></a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
            <!-- move top -->
            <button onclick="topFunction()" id="movetop" title="Go to top">
                <span class="fa fa-angle-up"></span>
            </button>
            <script>
            // When the user scrolls down 20px from the top of the document, show the button
            window.onscroll = function() {
                scrollFunction()
            };

            function scrollFunction() {
                if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                    document.getElementById("movetop").style.display = "block";
                } else {
                    document.getElementById("movetop").style.display = "none";
                }
            }

            // When the user clicks on the button, scroll to the top of the document
            function topFunction() {
                document.body.scrollTop = 0;
                document.documentElement.scrollTop = 0;
            }
            </script>
            <!-- //move top -->
            <script>
            $(function() {
                $('.navbar-toggler').click(function() {
                    $('body').toggleClass('noscroll');
                })
            });
            </script>
        </section>
        <!-- //footer -->
    </footer>
    <!-- jQuery JS -->
    <!-- <script src="/assets/website/js/frontend/clashnyanpasugithub/jquery-3.4.1.slim.min.js"></script> -->
    <!-- jQuery JS -->
    <script src="/assets/website/js/frontend/clashnyanpasugithub/jquery-3.5.1.min.js"></script>
    <!-- Template JavaScript -->
    <script src="/assets/website/js/frontend/clashnyanpasugithub/owl.carousel.js"></script>
    <!-- script for testimonials -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 0,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                667: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //testimonials owlcarousel -->
    <!-- script for customers -->
    <script>
    $(document).ready(function() {
        $('.owl-three').owlCarousel({
            loop: true,
            margin: 0,
            nav: false,
            responsiveClass: true,
            autoplay: true,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 2,
                    nav: false
                },
                667: {
                    items: 2,
                    nav: false
                },
                1000: {
                    items: 4,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //customers owlcarousel -->
    <!-- responsive tabs -->
    <script src="/assets/website/js/frontend/clashnyanpasugithub/easyResponsiveTabs.js"></script>
    <!--Plug-in Initialisation-->
    <script type="text/javascript">
    $(document).ready(function() {
        //Horizontal Tab
        $('#parentHorizontalTab').easyResponsiveTabs({
            type: 'default', //Types: default, vertical, accordion
            width: 'auto', //auto or any width like 600px
            fit: true, // 100% fit in a container
            tabidentify: 'hor_1', // The tab groups identifier
            activate: function(event) { // Callback function if tab is switched
                var $tab = $(this);
                var $info = $('#nested-tabInfo');
                var $name = $('span', $info);
                $name.text($tab.text());
                $info.show();
            }
        });
    });
    </script>
    <script src="/assets/website/js/frontend/clashnyanpasugithub/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- stats number counter-->
    <script src="/assets/website/js/frontend/clashnyanpasugithub/jquery.waypoints.min.js"></script>
    <script src="/assets/website/js/frontend/clashnyanpasugithub/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!--  Bootstrap JS -->
    <script src="/assets/website/js/frontend/clashnyanpasugithub/bootstrap.min.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>