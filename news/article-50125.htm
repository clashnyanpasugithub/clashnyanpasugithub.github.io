<!doctype html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://clashnyanpasugithub.github.io/news/article-50125.htm" />
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Spring Boot 集成Swagger</title>
        <meta name="description" content="Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。总体目标是使客户端和文件系统作为服务器以同样的速度来更新。文件的方法，参数和模型紧密集成到服" />
        <link rel="icon" href="/assets/website/img/clashnyanpasugithub/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Clash Nyanpasu Github机场节点官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://clashnyanpasugithub.github.io/news/article-50125.htm" />
    <meta property="og:site_name" content="Clash Nyanpasu Github机场节点官网" />
    <meta property="og:title" content="Spring Boot 集成Swagger" />
    <meta property="og:image" content="https://clashnyanpasugithub.github.io/uploads/20240820-1/dfa8c3600ffb088e692f0d671df5abb2.webp" />
        <meta property="og:release_date" content="2025-02-02T09:28:14" />
    <meta property="og:updated_time" content="2025-02-02T09:28:14" />
        <meta property="og:description" content="Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。总体目标是使客户端和文件系统作为服务器以同样的速度来更新。文件的方法，参数和模型紧密集成到服" />
        
    <!-- Template CSS -->
    <link rel="stylesheet" href="/assets/website/css/clashnyanpasugithub/style-starter.css">
    <!-- web fonts -->
    <link href="//fonts.googleapis.com/css2?family=Nunito:wght@200;300;400;600;700;800;900&display=swap" rel="stylesheet">

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Spring Boot 集成Swagger">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-F1C52JTEWP"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-F1C52JTEWP');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!--header-->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                                <a class="navbar-brand" href="/">
                    <span>Clash Nyanpasu Github</span>
                </a>
                                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/free-nodes/">免费节点</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/news/">新闻资讯</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
            </nav>
        </div>
    </header>
    <!--/header-->
    <!-- about breadcrumbs -->
    <nav id="breadcrumbs" class="breadcrumbs">
        <div class="container page-wrapper">
            <a href="/">首页</a> » <a href="/news/">新闻资讯</a> » <span class="breadcrumb_last" aria-current="page">正文</span>
        </div>
    </nav>
    
    <!-- /index-block2 -->
    <section class="w3l-index3 py-5">
        <div class="container py-lg-3 mt-3">
            <div class="row">
                <div class="col-md-9">
                    <h1 class="mb-5">Spring Boot 集成Swagger</h1>
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="markdown_views prism-kimbie-light"> <p>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。总体目标是使客户端和文件系统作为服务器以同样的速度来更新。文件的方法，参数和模型紧密集成到服务器端的代码，允许API来始终保持同步。Swagger 让部署管理和使用功能强大的API从未如此简单。</p> <p>更多关于Swagger的作用，相信大家百度一下能了解的更全面，本文以SpringBoot中集成Swagger为例做介绍说明。</p> <p><strong>一、修改pom.xml，添加maven依赖</strong></p> <pre class="prettyprint"><code class="hljs xml">        <span class="hljs-comment">&lt;!-- Swagger --&gt;</span>         <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>             <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>             <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>             <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>2.6.1<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>         <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>             <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>             <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>             <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>2.6.1<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>         <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span></code></pre> <p><strong>二、添加Swagger配置类</strong></p> <pre class="prettyprint"><code class="hljs java"><span class="hljs-keyword">package</span> com.example.swaggerdemo;  <span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> com.google.common.base.Predicates.or; <span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> springfox.documentation.builders.PathSelectors.regex;  <span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean; <span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration; <span class="hljs-keyword">import</span> org.springframework.web.context.request.async.DeferredResult;  <span class="hljs-keyword">import</span> springfox.documentation.service.ApiInfo; <span class="hljs-keyword">import</span> springfox.documentation.spi.DocumentationType; <span class="hljs-keyword">import</span> springfox.documentation.spring.web.plugins.Docket; <span class="hljs-keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;  <span class="hljs-javadoc">/**  * SwaggerConfig  */</span> <span class="hljs-annotation">@Configuration</span> <span class="hljs-annotation">@EnableSwagger</span>2 <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SwaggerConfig</span> {<!-- --></span>      <span class="hljs-javadoc">/**      * SpringBoot默认已经将classpath:/META-INF/resources/和classpath:/META-INF/resources/webjars/映射      * 所以该方法不需要重写，如果在SpringMVC中，可能需要重写定义（我没有尝试）      * 重写该方法需要 extends WebMvcConfigurerAdapter      *       */</span> <span class="hljs-comment">//    @Override</span> <span class="hljs-comment">//    public void addResourceHandlers(ResourceHandlerRegistry registry) {<!-- --></span> <span class="hljs-comment">//        registry.addResourceHandler("swagger-ui.html")</span> <span class="hljs-comment">//                .addResourceLocations("classpath:/META-INF/resources/");</span> <span class="hljs-comment">//</span> <span class="hljs-comment">//        registry.addResourceHandler("/webjars/**")</span> <span class="hljs-comment">//                .addResourceLocations("classpath:/META-INF/resources/webjars/");</span> <span class="hljs-comment">//    }</span>      <span class="hljs-javadoc">/**      * 可以定义多个组，比如本类中定义把test和demo区分开了      * （访问页面就可以看到效果了）       *      */</span>     <span class="hljs-annotation">@Bean</span>     <span class="hljs-keyword">public</span> Docket <span class="hljs-title">testApi</span>() {         <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2)                 .groupName(<span class="hljs-string">"test"</span>)                 .genericModelSubstitutes(DeferredResult.class) <span class="hljs-comment">//                .genericModelSubstitutes(ResponseEntity.class)</span>                 .useDefaultResponseMessages(<span class="hljs-keyword">false</span>)                 .forCodeGeneration(<span class="hljs-keyword">true</span>)                 .pathMapping(<span class="hljs-string">"/"</span>)<span class="hljs-comment">// base，最终调用接口后会和paths拼接在一起</span>                 .select()                 .paths(or(regex(<span class="hljs-string">"/api/.*"</span>)))<span class="hljs-comment">//过滤的接口</span>                 .build()                 .apiInfo(testApiInfo());     }      <span class="hljs-annotation">@Bean</span>     <span class="hljs-keyword">public</span> Docket <span class="hljs-title">demoApi</span>() {         <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2)                 .groupName(<span class="hljs-string">"demo"</span>)                 .genericModelSubstitutes(DeferredResult.class) <span class="hljs-comment">//              .genericModelSubstitutes(ResponseEntity.class)</span>                 .useDefaultResponseMessages(<span class="hljs-keyword">false</span>)                 .forCodeGeneration(<span class="hljs-keyword">false</span>)                 .pathMapping(<span class="hljs-string">"/"</span>)                 .select()                 .paths(or(regex(<span class="hljs-string">"/demo/.*"</span>)))<span class="hljs-comment">//过滤的接口</span>                 .build()                 .apiInfo(demoApiInfo());     }      <span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title">testApiInfo</span>() {         <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ApiInfoBuilder()             .title(<span class="hljs-string">"Electronic Health Record(EHR) Platform API"</span>)<span class="hljs-comment">//大标题</span>             .description(<span class="hljs-string">"EHR Platform's REST API, all the applications could access the Object model data via JSON."</span>)<span class="hljs-comment">//详细描述</span>             .version(<span class="hljs-string">"1.0"</span>)<span class="hljs-comment">//版本</span>             .termsOfServiceUrl(<span class="hljs-string">"NO terms of service"</span>)             .contact(<span class="hljs-keyword">new</span> Contact(<span class="hljs-string">"小单"</span>, <span class="hljs-string">"http://blog.csdn.net/catoop"</span>, <span class="hljs-string">"365384722@qq.com"</span>))<span class="hljs-comment">//作者</span>             .license(<span class="hljs-string">"The Apache License, Version 2.0"</span>)             .licenseUrl(<span class="hljs-string">"http://www.apache.org/licenses/LICENSE-2.0.html"</span>)             .build();     }      <span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title">demoApiInfo</span>() {         <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ApiInfoBuilder()             .title(<span class="hljs-string">"Electronic Health Record(EHR) Platform API"</span>)<span class="hljs-comment">//大标题</span>             .description(<span class="hljs-string">"EHR Platform's REST API, all the applications could access the Object model data via JSON."</span>)<span class="hljs-comment">//详细描述</span>             .version(<span class="hljs-string">"1.0"</span>)<span class="hljs-comment">//版本</span>             .termsOfServiceUrl(<span class="hljs-string">"NO terms of service"</span>)             .contact(<span class="hljs-keyword">new</span> Contact(<span class="hljs-string">"小单"</span>, <span class="hljs-string">"http://blog.csdn.net/catoop"</span>, <span class="hljs-string">"365384722@qq.com"</span>))<span class="hljs-comment">//作者</span>             .license(<span class="hljs-string">"The Apache License, Version 2.0"</span>)             .licenseUrl(<span class="hljs-string">"http://www.apache.org/licenses/LICENSE-2.0.html"</span>)             .build();          <span class="hljs-keyword">return</span> apiInfo;     } } </code></pre> <p>经过这2步配置后，我们启动服务后，访问：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://localhost:8080/swagger-ui.html"  rel="nofollow">http://localhost:8080/swagger-ui.html</a> 就完成了集成。</p> <p>Swagger会默认把所有Controller中的RequestMapping方法都生成API出来，实际上我们一般只需要标准接口的（像返回页面的那种Controller方法我们并不需要），所有你可以按下面的方法来设定要生成API的方法的要求。 <br /> 如下我针对RestController注解的类和ResponseBody注解的方法才生成Swaager的API，并且排除了特定的类，代码如下：</p> <pre class="prettyprint"><code class="hljs java"><span class="hljs-annotation">@Configuration</span> <span class="hljs-annotation">@EnableSwagger</span>2 <span class="hljs-comment">// 启用 Swagger</span> <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SwaggerConfig</span> {<!-- --></span>      <span class="hljs-annotation">@Bean</span>     <span class="hljs-keyword">public</span> Docket <span class="hljs-title">createRestApi</span>() {         Predicate&lt;RequestHandler&gt; predicate = <span class="hljs-keyword">new</span> Predicate&lt;RequestHandler&gt;() {             <span class="hljs-annotation">@Override</span>             <span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">apply</span>(RequestHandler input) {                 Class&lt;?&gt; declaringClass = input.declaringClass();                 <span class="hljs-keyword">if</span> (declaringClass == BasicErrorController.class)<span class="hljs-comment">// 排除</span>                     <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;                 <span class="hljs-keyword">if</span>(declaringClass.isAnnotationPresent(RestController.class)) <span class="hljs-comment">// 被注解的类</span>                     <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;                 <span class="hljs-keyword">if</span>(input.isAnnotatedWith(ResponseBody.class)) <span class="hljs-comment">// 被注解的方法</span>                     <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;                 <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;             }         };         <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2)                 .apiInfo(apiInfo())                 .useDefaultResponseMessages(<span class="hljs-keyword">false</span>)                 .select()                 .apis(predicate)                 .build();     }      <span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title">apiInfo</span>() {         <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ApiInfoBuilder()             .title(<span class="hljs-string">"包含媒体、咨询、搜索引擎关键字、广告等类型接口的服务"</span>)<span class="hljs-comment">//大标题</span>             .version(<span class="hljs-string">"1.0"</span>)<span class="hljs-comment">//版本</span>             .build();     } }</code></pre> <p><strong>三、常见swagger注解一览与使用</strong></p> <p>最常用的5个注解</p> <pre class="prettyprint"><code class="hljs ruby"><span class="hljs-variable">@Api</span>：修饰整个类，描述<span class="hljs-constant">Controller</span>的作用 <span class="hljs-variable">@ApiOperation</span>：描述一个类的一个方法，或者说一个接口 <span class="hljs-variable">@ApiParam</span>：单个参数描述 <span class="hljs-variable">@ApiModel</span>：用对象来接收参数 <span class="hljs-variable">@ApiProperty</span>：用对象接收参数时，描述对象的一个字段</code></pre> <p>其它若干</p> <pre class="prettyprint"><code class="hljs ruby"><span class="hljs-variable">@ApiResponse</span>：<span class="hljs-constant">HTTP</span>响应其中<span class="hljs-number">1</span>个描述 <span class="hljs-variable">@ApiResponses</span>：<span class="hljs-constant">HTTP</span>响应整体描述 <span class="hljs-variable">@ApiIgnore</span>：使用该注解忽略这个<span class="hljs-constant">API</span>   <span class="hljs-variable">@ApiClass</span> <span class="hljs-variable">@ApiError</span> <span class="hljs-variable">@ApiErrors</span>  <span class="hljs-variable">@ApiParamImplicit</span> <span class="hljs-variable">@ApiParamsImplicit</span></code></pre> <p>下面创建2个Controller来测试： <br /> 1、TestController.java</p> <pre class="prettyprint"><code class="hljs java"><span class="hljs-annotation">@Controller</span> <span class="hljs-annotation">@RequestMapping</span>(<span class="hljs-string">"/api/test"</span>) <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestController</span> {<!-- --></span>      <span class="hljs-annotation">@ResponseBody</span>     <span class="hljs-annotation">@RequestMapping</span>(value = <span class="hljs-string">"/show"</span>, method=RequestMethod.POST, produces=MediaType.APPLICATION_JSON_VALUE)<span class="hljs-comment">// 这里指定RequestMethod，如果不指定Swagger会把所有RequestMethod都输出，在实际应用中，具体指定请求类型也使接口更为严谨。</span>     <span class="hljs-annotation">@ApiOperation</span>(value=<span class="hljs-string">"测试接口"</span>, notes=<span class="hljs-string">"测试接口详细描述"</span>)     <span class="hljs-keyword">public</span> String <span class="hljs-title">show</span>(             @<span class="hljs-title">ApiParam</span>(required=<span class="hljs-keyword">true</span>, name=<span class="hljs-string">"name"</span>, value=<span class="hljs-string">"姓名"</span>)             <span class="hljs-annotation">@RequestParam</span>(name = <span class="hljs-string">"name"</span>, required=<span class="hljs-keyword">true</span>) String stuName){         <span class="hljs-keyword">return</span> <span class="hljs-string">"success"</span>;     } }</code></pre> <p>2、DemoController.java</p> <pre class="prettyprint"><code class="hljs java"><span class="hljs-javadoc">/**  * DemoController  *   */</span> <span class="hljs-annotation">@Controller</span> <span class="hljs-annotation">@RequestMapping</span>(value = <span class="hljs-string">"/demo"</span>) <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoController</span> {<!-- --></span>      <span class="hljs-keyword">private</span> Logger logger = LoggerFactory.getLogger(DemoController.class);      <span class="hljs-javadoc">/**      * 可以直接使用@ResponseBody响应JSON      *       *<span class="hljs-javadoctag"> @param</span> request      *<span class="hljs-javadoctag"> @param</span> response      *<span class="hljs-javadoctag"> @return</span>      */</span>     <span class="hljs-annotation">@ResponseBody</span>     <span class="hljs-annotation">@RequestMapping</span>(value = <span class="hljs-string">"/getcount"</span>, method = RequestMethod.POST)     <span class="hljs-annotation">@ApiOperation</span>(value=<span class="hljs-string">"测试-getCount"</span>, notes=<span class="hljs-string">"getCount更多说明"</span>)     <span class="hljs-keyword">public</span> ModelMap <span class="hljs-title">getCount</span>(HttpServletRequest request,             HttpServletResponse response) {         logger.info(<span class="hljs-string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; begin getCount &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"</span>);         ModelMap map = <span class="hljs-keyword">new</span> ModelMap();         map.addAttribute(<span class="hljs-string">"count"</span>, <span class="hljs-number">158</span>);          <span class="hljs-comment">// 后台获取的国际化信息</span>         map.addAttribute(<span class="hljs-string">"xstest"</span>, <span class="hljs-string">"测试"</span>);         <span class="hljs-keyword">return</span> map;     }      <span class="hljs-javadoc">/**      * 可以直接使用@ResponseBody响应JSON      *       *<span class="hljs-javadoctag"> @param</span> request      *<span class="hljs-javadoctag"> @param</span> response      *<span class="hljs-javadoctag"> @return</span>      */</span>     <span class="hljs-annotation">@ApiIgnore</span><span class="hljs-comment">//使用该注解忽略这个API</span>     <span class="hljs-annotation">@ResponseBody</span>     <span class="hljs-annotation">@RequestMapping</span>(value = <span class="hljs-string">"/jsonTest1"</span>, method = RequestMethod.POST)     <span class="hljs-keyword">public</span> ModelMap <span class="hljs-title">jsonTest</span>(HttpServletRequest request,             HttpServletResponse response) {         ModelMap map = <span class="hljs-keyword">new</span> ModelMap();         map.addAttribute(<span class="hljs-string">"hello"</span>, <span class="hljs-string">"你好"</span>);         map.addAttribute(<span class="hljs-string">"veryGood"</span>, <span class="hljs-string">"很好"</span>);          <span class="hljs-keyword">return</span> map;     }      <span class="hljs-javadoc">/**      * 可以直接使用@ResponseBody响应JSON      *       *<span class="hljs-javadoctag"> @param</span> request      *<span class="hljs-javadoctag"> @param</span> response      *<span class="hljs-javadoctag"> @return</span>      */</span>     <span class="hljs-annotation">@ResponseBody</span>     <span class="hljs-annotation">@RequestMapping</span>(value = <span class="hljs-string">"/jsonTest3"</span>, method = RequestMethod.POST)     <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title">jsonTest3</span>(HttpServletRequest request,             HttpServletResponse response) {         List&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();         list.add(<span class="hljs-string">"hello"</span>);         list.add(<span class="hljs-string">"你好"</span>);         <span class="hljs-keyword">return</span> list;     }      <span class="hljs-javadoc">/**      * JSON请求一个对象&lt;br/&gt;      * （Ajax Post Data：{"name":"名称","content":"内容"}）      *       *<span class="hljs-javadoctag"> @param</span> version      *<span class="hljs-javadoctag"> @return</span>      */</span>     <span class="hljs-annotation">@ResponseBody</span>     <span class="hljs-annotation">@RequestMapping</span>(value = <span class="hljs-string">"/jsonTest2"</span>, method = RequestMethod.POST)     <span class="hljs-keyword">public</span> ModelMap <span class="hljs-title">jsonTest2</span>(@RequestBody Demo demo) {         logger.info(<span class="hljs-string">"demoName："</span> + demo.getName());         logger.info(<span class="hljs-string">"demoContent："</span> + demo.getContent());         ModelMap map = <span class="hljs-keyword">new</span> ModelMap();         map.addAttribute(<span class="hljs-string">"result"</span>, <span class="hljs-string">"ok"</span>);         <span class="hljs-keyword">return</span> map;     }      <span class="hljs-javadoc">/**      * 直接读取URL参数值&lt;br/&gt;      * /demo/jsonTest6.do?name=Hello&amp;content=World      *       *<span class="hljs-javadoctag"> @param</span> demoName      *<span class="hljs-javadoctag"> @param</span> content      *<span class="hljs-javadoctag"> @return</span>      */</span>     <span class="hljs-annotation">@ResponseBody</span>     <span class="hljs-annotation">@RequestMapping</span>(value = <span class="hljs-string">"/jsonTest6"</span>, method = RequestMethod.POST)     <span class="hljs-keyword">public</span> ModelMap <span class="hljs-title">jsonTest6</span>(@<span class="hljs-title">RequestParam</span>("name") String demoName, @RequestParam String content) {         logger.info(<span class="hljs-string">"demoName："</span> + demoName);         ModelMap map = <span class="hljs-keyword">new</span> ModelMap();         map.addAttribute(<span class="hljs-string">"name"</span>,demoName + <span class="hljs-string">"AAA"</span>);         map.addAttribute(<span class="hljs-string">"content"</span>,content + <span class="hljs-string">"BBB"</span>);         map.addAttribute(<span class="hljs-string">"date"</span>,<span class="hljs-keyword">new</span> java.util.Date());         <span class="hljs-keyword">return</span> map;     }      <span class="hljs-javadoc">/**      * JSON请求一个对象，将RequestBody自动转换为JSONObject对象&lt;br/&gt;      * （Ajax Post Data：{"name":"名称","content":"内容"}）      *       * 使用JSONObject请添加依赖      *  &lt;dependency&gt;      *      &lt;groupId&gt;net.sf.json-lib&lt;/groupId&gt;      *      &lt;artifactId&gt;json-lib&lt;/artifactId&gt;      *      &lt;version&gt;2.4&lt;/version&gt;      *      &lt;!--指定jdk版本 --&gt;      *      &lt;classifier&gt;jdk15&lt;/classifier&gt;      *  &lt;/dependency&gt;      *       *<span class="hljs-javadoctag"> @param</span> version      *<span class="hljs-javadoctag"> @return</span>      */</span>     <span class="hljs-annotation">@ResponseBody</span>     <span class="hljs-annotation">@RequestMapping</span>(value = <span class="hljs-string">"/jsonTest5"</span>, method = RequestMethod.POST)     <span class="hljs-keyword">public</span> ModelMap <span class="hljs-title">jsonTest5</span>(@RequestBody JSONObject jsonObject) {         String name = jsonObject.getString(<span class="hljs-string">"name"</span>);         logger.info(<span class="hljs-string">"demoName："</span> + name);         ModelMap map = <span class="hljs-keyword">new</span> ModelMap();         map.addAttribute(<span class="hljs-string">"demoName"</span>,name);         <span class="hljs-keyword">return</span> map;     }      <span class="hljs-javadoc">/**      * 输入 和输出为JSON格式的数据的方式 HttpEntity&lt;?&gt; ResponseEntity&lt;?&gt;      *       *<span class="hljs-javadoctag"> @param</span> u      *<span class="hljs-javadoctag"> @return</span>      */</span>     <span class="hljs-annotation">@ResponseBody</span>     <span class="hljs-annotation">@RequestMapping</span>(value = <span class="hljs-string">"/jsonTest4"</span>, method = RequestMethod.POST)     <span class="hljs-keyword">public</span> ResponseEntity&lt;String&gt; <span class="hljs-title">jsonTest4</span>(HttpEntity&lt;Demo&gt; demo,             HttpServletRequest request, HttpSession session) {         <span class="hljs-comment">//获取Headers方法</span>         HttpHeaders headers = demo.getHeaders();          <span class="hljs-comment">// 获取内容</span>         String demoContent = demo.getBody().getContent();          <span class="hljs-comment">// 这里直接new一个对象（HttpHeaders headers = new HttpHeaders();）</span>         HttpHeaders responseHeaders = <span class="hljs-keyword">new</span> HttpHeaders();         responseHeaders.add(<span class="hljs-string">"MyHeaderName"</span>, <span class="hljs-string">"SHANHY"</span>);          ResponseEntity&lt;String&gt; responseResult = <span class="hljs-keyword">new</span> ResponseEntity&lt;String&gt;(                 demoContent, responseHeaders, HttpStatus.OK);         <span class="hljs-keyword">return</span> responseResult;     }  }</code></pre> <p>Swagger2默认将所有的Controller中的RequestMapping方法都会暴露，然而在实际开发中，我们并不一定需要把所有API都提现在文档中查看，这种情况下，使用注解@ApiIgnore来解决，如果应用在Controller范围上，则当前Controller中的所有方法都会被忽略，如果应用在方法上，则对应用的方法忽略暴露API。</p> <p>注解@ApiOperation和@ApiParam可以理解为API说明，多动手尝试就很容易理解了。 <br /> 如果我们不使用这样注解进行说明，Swagger2也是有默认值的，没什么可说的试试就知道了。</p> <p>在 <a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://localhost:8080/swagger-ui.html"  rel="nofollow">http://localhost:8080/swagger-ui.html</a> 显示页面的右上角有api_key ，springfox-swagger 2.2.2 版本并没有进行处理，我们可以自己添加拦截器拦截 /v2/api-docs 来处理我们API文档的访问权限，如果要更严格更灵活的控制，可能需要修改源码来实现了。相信 springfox-swagger 的后期版本应该会支持更全面的应用需求的。</p> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-49608.htm">猫打疫苗要多少钱一次（猫打疫苗总共多少钱）</a></p>
                                        <p>下一个：<a href="/news/article-50127.htm">免费领养狗狗正规网站平台有哪些软件呢（免费领养狗狗app）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-11-9-free-node-subscribe-links.htm" title="「11月9日」最高速度18.7M/S，2024年Clash Nyanpasu Github免费机场订阅节点链接，2024翻墙机场推荐">「11月9日」最高速度18.7M/S，2024年Clash Nyanpasu Github免费机场订阅节点链接，2024翻墙机场推荐</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-30-linux-clash-nyanpasu.htm" title="「12月30日」最高速度20.4M/S，2024年Clash Nyanpasu Github免费机场订阅节点链接，2024翻墙机场推荐">「12月30日」最高速度20.4M/S，2024年Clash Nyanpasu Github免费机场订阅节点链接，2024翻墙机场推荐</a></li>
                        <li class="py-2"><a href="/news/article-18972.htm" title="动物疫苗的了解和感受作文（动物疫苗对人体有害吗）">动物疫苗的了解和感受作文（动物疫苗对人体有害吗）</a></li>
                        <li class="py-2"><a href="/news/article-24936.htm" title="java list在哪个包_Java 中初始化 List 集合的 N 种方式！">java list在哪个包_Java 中初始化 List 集合的 N 种方式！</a></li>
                        <li class="py-2"><a href="/news/article-36738.htm" title="狗狗领养协议有法律效力吗知乎（狗狗领养协议有法律效力吗知乎文章）">狗狗领养协议有法律效力吗知乎（狗狗领养协议有法律效力吗知乎文章）</a></li>
                        <li class="py-2"><a href="/news/article-47608.htm" title="SpringBoot动态定时任务的实现">SpringBoot动态定时任务的实现</a></li>
                        <li class="py-2"><a href="/news/article-49119.htm" title="动物怎么接种疫苗（动物疫苗接种方法及注意事项）">动物怎么接种疫苗（动物疫苗接种方法及注意事项）</a></li>
                        <li class="py-2"><a href="/news/article-47149.htm" title="济南领养狗狗的网站（济南领养狗狗的地方）">济南领养狗狗的网站（济南领养狗狗的地方）</a></li>
                        <li class="py-2"><a href="/news/article-38209.htm" title="动物疫苗空瓶无害化处理方案（动物疫苗空瓶无害化处理方案怎么写）">动物疫苗空瓶无害化处理方案（动物疫苗空瓶无害化处理方案怎么写）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-18-clash-nyanpasu.htm" title="「11月18日」最高速度20.3M/S，2024年Clash Nyanpasu Github免费机场订阅节点链接，2024翻墙机场推荐">「11月18日」最高速度20.3M/S，2024年Clash Nyanpasu Github免费机场订阅节点链接，2024翻墙机场推荐</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">12</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">92</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
        <footer>
        <!-- footer -->
        <section class="w3l-footer">
            <div class="w3l-footer-16-main py-5">
                <div class="container">
                    <div class="d-flex below-section justify-content-between align-items-center pt-4 mt-5">
                        <div class="columns text-lg-left text-center">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                            <p>Clash Nyanpasu Github机场节点官网 版权所有 Powered by WordPress</p>
                        </div>
                        <div class="columns-2 mt-lg-0 mt-3">
                            <ul class="social">
                                <li><a href="#facebook"><span class="fa fa-facebook" aria-hidden="true"></span></a>
                                </li>
                                <li><a href="#linkedin"><span class="fa fa-linkedin" aria-hidden="true"></span></a>
                                </li>
                                <li><a href="#twitter"><span class="fa fa-twitter" aria-hidden="true"></span></a>
                                </li>
                                <li><a href="#google"><span class="fa fa-google-plus" aria-hidden="true"></span></a>
                                </li>
                                <li><a href="#github"><span class="fa fa-github" aria-hidden="true"></span></a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
            <!-- move top -->
            <button onclick="topFunction()" id="movetop" title="Go to top">
                <span class="fa fa-angle-up"></span>
            </button>
            <script>
            // When the user scrolls down 20px from the top of the document, show the button
            window.onscroll = function() {
                scrollFunction()
            };

            function scrollFunction() {
                if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                    document.getElementById("movetop").style.display = "block";
                } else {
                    document.getElementById("movetop").style.display = "none";
                }
            }

            // When the user clicks on the button, scroll to the top of the document
            function topFunction() {
                document.body.scrollTop = 0;
                document.documentElement.scrollTop = 0;
            }
            </script>
            <!-- //move top -->
            <script>
            $(function() {
                $('.navbar-toggler').click(function() {
                    $('body').toggleClass('noscroll');
                })
            });
            </script>
        </section>
        <!-- //footer -->
    </footer>
    <!-- jQuery JS -->
    <!-- <script src="/assets/website/js/frontend/clashnyanpasugithub/jquery-3.4.1.slim.min.js"></script> -->
    <!-- jQuery JS -->
    <script src="/assets/website/js/frontend/clashnyanpasugithub/jquery-3.5.1.min.js"></script>
    <!-- Template JavaScript -->
    <script src="/assets/website/js/frontend/clashnyanpasugithub/owl.carousel.js"></script>
    <!-- script for testimonials -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 0,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                667: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //testimonials owlcarousel -->
    <!-- script for customers -->
    <script>
    $(document).ready(function() {
        $('.owl-three').owlCarousel({
            loop: true,
            margin: 0,
            nav: false,
            responsiveClass: true,
            autoplay: true,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 2,
                    nav: false
                },
                667: {
                    items: 2,
                    nav: false
                },
                1000: {
                    items: 4,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //customers owlcarousel -->
    <!-- responsive tabs -->
    <script src="/assets/website/js/frontend/clashnyanpasugithub/easyResponsiveTabs.js"></script>
    <!--Plug-in Initialisation-->
    <script type="text/javascript">
    $(document).ready(function() {
        //Horizontal Tab
        $('#parentHorizontalTab').easyResponsiveTabs({
            type: 'default', //Types: default, vertical, accordion
            width: 'auto', //auto or any width like 600px
            fit: true, // 100% fit in a container
            tabidentify: 'hor_1', // The tab groups identifier
            activate: function(event) { // Callback function if tab is switched
                var $tab = $(this);
                var $info = $('#nested-tabInfo');
                var $name = $('span', $info);
                $name.text($tab.text());
                $info.show();
            }
        });
    });
    </script>
    <script src="/assets/website/js/frontend/clashnyanpasugithub/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- stats number counter-->
    <script src="/assets/website/js/frontend/clashnyanpasugithub/jquery.waypoints.min.js"></script>
    <script src="/assets/website/js/frontend/clashnyanpasugithub/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!--  Bootstrap JS -->
    <script src="/assets/website/js/frontend/clashnyanpasugithub/bootstrap.min.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>